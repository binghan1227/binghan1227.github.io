<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://binghan1227.github.io</id>
    <title>binghan1227</title>
    <updated>2020-08-22T05:34:08.104Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://binghan1227.github.io"/>
    <link rel="self" href="https://binghan1227.github.io/atom.xml"/>
    <subtitle>你是怎么发现这里的?</subtitle>
    <logo>https://binghan1227.github.io/images/avatar.png</logo>
    <icon>https://binghan1227.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, binghan1227</rights>
    <entry>
        <title type="html"><![CDATA[Git 与 Github 的使用指北]]></title>
        <id>https://binghan1227.github.io/post/git/</id>
        <link href="https://binghan1227.github.io/post/git/">
        </link>
        <updated>2020-03-28T05:20:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="git-的下载与安装">Git 的下载与安装</h2>
<p>可以到<a href="https://git-scm.com/downloads">官网</a>查看并下载对应版本的客户端。</p>
<h2 id="创建仓库">创建仓库</h2>
<p>在文件夹中执行</p>
<pre><code class="language-git">git init
</code></pre>
<h3 id="新建文件">新建文件</h3>
<p>我们可以使用</p>
<pre><code class="language-git">git add &lt;filename&gt;
</code></pre>
<p>添加指定文件。<br>
或者使用</p>
<pre><code class="language-git">git add .
</code></pre>
<p>来添加所有文件。</p>
<h3 id="提交版本">提交版本</h3>
<p>现在我们已经添加了这些文件，我们希望它们能够真正被保存在Git仓库。<br>
为此，我们将它们提交到仓库。</p>
<pre><code class="language-git">git commit -m &quot;Adding files&quot;
</code></pre>
<p>如果不使用-m，会出现编辑器来让你写自己的注释信息。<br>
当我们修改了很多文件，而不想每一个都add，想commit自动来提交本地修改，我们可以使用-a标识。如</p>
<pre><code class="language-git">git commit -a -m &quot;Changed some files&quot;
</code></pre>
<p>git commit 命令的-a选项可将所有被修改或者已删除的且已经被git管理的文档提交到仓库中。<br>
<font color=#FF0000>※千万注意，-a不会造成新文件被提交，只能修改。</font></p>
<h3 id="删除">删除</h3>
<p>如何你想从资源库中删除文件，可以使用</p>
<pre><code class="language-git">git rm &lt;filename&gt;
</code></pre>
<h3 id="分支与合并">分支与合并</h3>
<p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。<br>
有人把 Git 的分支模型称为必杀技特性，而正是因为它，将 Git 从版本控制系统家族里区分出来。</p>
<h4 id="创建分支">创建分支</h4>
<p>分支在本地完成，速度快。要创建一个新的分支，我们使用branch命令。</p>
<pre><code class="language-git">git branch &lt;name&gt;
</code></pre>
<h4 id="切换分支">切换分支</h4>
<p>branch命令不会将我们带入分支，只是创建一个新分支。所以我们使用checkout命令来更改分支。</p>
<pre><code class="language-git">git checkout &lt;name&gt;
</code></pre>
<p>第一个分支，或主分支，被称为&quot;master&quot;。</p>
<pre><code class="language-git">git checkout master
</code></pre>
<h4 id="合并分支">合并分支</h4>
<p>对其他分支的更改不会反映在主分支上。如果想将更改提交到主分支，则需切换回master分支，然后使用合并。</p>
<pre><code class="language-git">git checkout master
git merge &lt;name&gt;
</code></pre>
<h4 id="删除分支">删除分支</h4>
<p>如果您想删除分支，我们使用-d标识。</p>
<pre><code class="language-git">git branch -d &lt;name&gt;
</code></pre>
<h3 id="标签">标签</h3>
<p>为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 1.0.0 的标签：</p>
<pre><code class="language-git">git tag 1.0.0 1b2e1d63ff
</code></pre>
<p>期中，1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：</p>
<pre><code class="language-git">git log
</code></pre>
<p>你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。</p>
<h3 id="替换本地改动">替换本地改动</h3>
<p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：</p>
<pre><code class="language-git">git checkout -- &lt;filename&gt;
</code></pre>
<p>此命令会使用之前提交到仓库中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac+HomeBridge+米家=?]]></title>
        <id>https://binghan1227.github.io/post/homebridge/</id>
        <link href="https://binghan1227.github.io/post/homebridge/">
        </link>
        <updated>2020-03-24T07:55:45.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>众所周知，原生支持 homekit 的智能设备普遍很贵，那么，便宜的米家设备就成为了智能家居的不二之选，如何将不支持 homekit 的设备接入 homekit 呢？答案就是 HomeBridge 。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>众所周知，原生支持 homekit 的智能设备普遍很贵，那么，便宜的米家设备就成为了智能家居的不二之选，如何将不支持 homekit 的设备接入 homekit 呢？答案就是 HomeBridge 。</p>
</blockquote>
<!-- more -->
<h2 id="一安装-homebridge">一.安装 HomeBridge</h2>
<h3 id="step-1-安装-xcode">Step 1. 安装 Xcode</h3>
<p>在 App Store 中下载安装即可。</p>
<h3 id="step-2-安装-nodejs">Step 2. 安装 Node.js</h3>
<p>在<a href="http://nodejs.cn">官网</a>中下载安装。</p>
<h3 id="step-3-安装-homebridge">Step 3. 安装 HomeBridge</h3>
<p>在 terminal (终端)中输入</p>
<pre><code class="language-dos">sudo npm -g install homebridge
</code></pre>
<h3 id="step-4-创建并编辑-config-文件">Step 4. 创建并编辑 config 文件</h3>
<blockquote>
<p>在这步可以有多种选择，我更推荐使用 Xcode 来编辑。</p>
</blockquote>
<h4 id="1-创建文件">(1) 创建文件</h4>
<p>在 terminal (终端)中输入</p>
<pre><code class="language-dos">cd ~/.homebridge/
vi config.json
</code></pre>
<h4 id="2-编辑文件">(2) 编辑文件</h4>
<p>在访达&gt;「前往」&gt;「前往文件夹」，输入路径</p>
<pre><code class="language-dos">~/.homebridge/
</code></pre>
<p>再用 Xcode 打开 config.json 文件，并输入</p>
<pre><code class="language-json">{
    &quot;bridge&quot;: {
        &quot;name&quot;: &quot;HomeBridge&quot;,
        &quot;username&quot;: &quot;B8:27:EB:EE:AF:1B&quot;,
        &quot;port&quot;: 54642,
        &quot;pin&quot;: &quot;031-45-154&quot;
    }
}
</code></pre>
<h3 id="step-5-运行-homebridge">Step 5. 运行 HomeBridge</h3>
<p>在 terminal (终端)中输入</p>
<pre><code class="language-dos">homebridge
</code></pre>
<p>正常情况下你将会看到一个二维码，但如果后面还有一堆红色文字，那么就是你的端口被占用了，更 config 文件中的 port 即可。<br>
<font color=#FF0000>※ 想要停止 HomeBridge 可以直接关掉终端，或者是按 ctrl + c 。</font><br>
最后 家庭app 扫描二维码即可。</p>
<hr>
<h2 id="二接入米家设备">二.接入米家设备</h2>
<h3 id="1-接入-yeelight-设备">1. 接入 Yeelight 设备</h3>
<h4 id="step-1-安装-homebridge-yeelight-插件">Step 1. 安装 homebridge-yeelight 插件</h4>
<p>在 terminal (终端)中输入</p>
<pre><code class="language-dos">sudo npm -g install homebridge-yeelight
</code></pre>
<h4 id="step-2-修改-config-文件">Step 2. 修改 config 文件</h4>
<p>在访达&gt;「前往」&gt;「前往文件夹」，输入路径</p>
<pre><code class="language-dos">~/.homebridge/
</code></pre>
<p>再用 Xcode 打开 config.json 文件，并用以下代码覆盖内容(注意端口)</p>
<pre><code class="language-json">{
    &quot;bridge&quot;: {
        &quot;name&quot;: &quot;HomeBridge&quot;,
        &quot;username&quot;: &quot;B8:27:EB:EE:AF:1B&quot;,
        &quot;port&quot;: 54642,
        &quot;pin&quot;: &quot;031-45-154&quot;
    },

    &quot;platforms&quot;: [
    	{
            &quot;platform&quot; : &quot;yeelight&quot;,
            &quot;name&quot; : &quot;yeelight&quot;
    	}
    ]
}
</code></pre>
<h4 id="step-3-运行-homebridge">Step 3. 运行 HomeBridge</h4>
<p>在 terminal (终端)中输入</p>
<pre><code class="language-dos">homebridge
</code></pre>
<p>我们应该已经可以看到[yeelight]的消息了(如下图)<br>
<img src="https://binghan1227.github.io/post-images/1585095109986.png" alt="" loading="lazy"></p>
<h4 id="step-4-开启-yeelight-权限">Step 4. 开启 Yeelight 权限</h4>
<p>就算装了 homebridge-yeelight 插件，也不一定可以完全的控制 Yeelight 的设备，所以我们要开启权限，让 HomeBridge 可以完全的控制 Yeelight 设备。</p>
<h5 id="1下载-yeelight-app">(1)下载 Yeelight app</h5>
<p>在 App Store 中搜索并下载即可</p>
<h5 id="2打开局域网控制">(2)打开局域网控制</h5>
<p>在 Yeelight app 中选择你的设备，点击三角形的图标<br>
<img src="https://binghan1227.github.io/post-images/1585095656804.jpeg" alt="" loading="lazy"><br>
点击「局域网控制」<br>
<img src="https://binghan1227.github.io/post-images/1585095709714.jpeg" alt="" loading="lazy"><br>
打开「局域网控制」开关<br>
<img src="https://binghan1227.github.io/post-images/1585095745583.jpeg" alt="" loading="lazy"><br>
将你所有的 Yeelight 设备都打开「局域网控制」，就可以在你的 家庭app 中查看并控制它们了。</p>
<hr>
<h3 id="2-接入米家智能插座wifi版">2. 接入米家智能插座WiFi版</h3>
<h4 id="step-1-安装-homebridge-mi-outlet-插件">Step 1. 安装 homebridge-mi-outlet 插件</h4>
<p>在 terminal (终端)中输入</p>
<pre><code class="language-dos">sudo npm -g install homebridge-mi-outlet
</code></pre>
<h4 id="step-2-获取设备-token">Step 2. 获取设备 Token</h4>
<blockquote>
<p>此步较为麻烦，在此只提供一种方法，其他方法可自行百度。</p>
</blockquote>
<h5 id="1下载-thor-或其他抓包应用">(1)下载 Thor 或其他抓包应用</h5>
<p>在App Store中搜索并下载即可</p>
<h5 id="2开始抓包">(2)开始抓包</h5>
<p>如图(不同应用可能有区别，如果使用 Thor 可以使用我的过滤器 <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>)<br>
<img src="https://binghan1227.github.io/post-images/1585106571710.jpeg" alt="" loading="lazy"></p>
<h5 id="3打开米家app">(3)打开米家app</h5>
<p>如图，如果不放心可以打开再关闭设备一次。<br>
<img src="https://binghan1227.github.io/post-images/1585106629395.jpeg" alt="" loading="lazy"></p>
<h5 id="4获取-token">(4)获取 Token</h5>
<p>打开 Thor(或其他抓包应用)，找到名为「device_list_page」的文件，选择「响应」，点击「txt」。<br>
<img src="https://binghan1227.github.io/post-images/1585107034324.jpeg" alt="" loading="lazy"><br>
在消息体中找到设备的「ip」、「token」(见下图)，记录下来。<br>
<img src="https://binghan1227.github.io/post-images/1585107151723.jpeg" alt="" loading="lazy"></p>
<h4 id="step-3-修改config文件">Step 3. 修改config文件</h4>
<p>在访达&gt;「前往」&gt;「前往文件夹」，输入路径</p>
<pre><code class="language-dos">~/.homebridge/
</code></pre>
<p>再用 Xcode 打开 config.json 文件，并用以下代码覆盖内容(注意端口)</p>
<pre><code class="language-json">{
    &quot;bridge&quot;: {
        &quot;name&quot;: &quot;HomeBridge&quot;,
        &quot;username&quot;: &quot;B8:27:EB:EE:AF:1B&quot;,
        &quot;port&quot;: 54642,
        &quot;pin&quot;: &quot;031-45-154&quot;
    },

    &quot;platforms&quot;: [{
    &quot;platform&quot;: &quot;MiOutletPlatform&quot;,
    &quot;deviceCfgs&quot;: [{
        &quot;type&quot;: &quot;MiPlugBase&quot;,
        &quot;ip&quot;: &quot;192.168.xx.xx&quot;,
        &quot;token&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;,
        &quot;outletName&quot;: &quot;living room outlet&quot;,
        &quot;outletDisable&quot;: false,
        &quot;temperatureName&quot;: &quot;living room outlet temperature&quot;,
        &quot;temperatureDisable&quot;: false,
        &quot;switchLEDName&quot;: &quot;living room led light switch&quot;,
        &quot;switchLEDDisable&quot;: false
        }]
    }]
}
</code></pre>
<p>将上面的 &quot;ip&quot; 与 &quot;token&quot; 替换为之前记录的即可。<br>
<font color=#FF0000>※ 多个设备时只修改 &quot;platforms&quot; (注意逗号)，如我的 config 文件为</font></p>
<pre><code class="language-json">{
    &quot;bridge&quot;: {
        &quot;name&quot;: &quot;HomeBridge&quot;,
        &quot;username&quot;: &quot;B8:27:EB:EE:AF:1B&quot;,
        &quot;port&quot;: 54642,
        &quot;pin&quot;: &quot;031-45-154&quot;
    },

    &quot;platforms&quot;: [
        {
            &quot;platform&quot; : &quot;yeelight&quot;,
            &quot;name&quot; : &quot;yeelight&quot;
        },{
            &quot;platform&quot;: &quot;MiOutletPlatform&quot;,
            &quot;deviceCfgs&quot;: [{
                &quot;type&quot;: &quot;MiPlugBase&quot;,
                &quot;ip&quot;: &quot;192.168.xx.xx&quot;,
                &quot;token&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxdc075eed4a7&quot;,
                &quot;outletName&quot;: &quot;living room outlet&quot;,
                &quot;outletDisable&quot;: false,
                &quot;temperatureName&quot;: &quot;living room outlet temperature&quot;,
                &quot;temperatureDisable&quot;: false,
                &quot;switchLEDName&quot;: &quot;living room led light switch&quot;,
                &quot;switchLEDDisable&quot;: false
            }]
      }]
}
</code></pre>
<h4 id="step-4-运行-homebridge">Step 4. 运行 HomeBridge</h4>
<p>在 terminal (终端)中输入</p>
<pre><code class="language-dos">homebridge
</code></pre>
<p>如果一起正常，你将在 家庭app 中发现三个设备，分别为「总开关」「指示灯开关」和「温度」，可以自行替换备注。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>链接：https://pan.baidu.com/s/1Nng4uC2UVB1gxEhZwgRIvA 提取码：61B6 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown]]></title>
        <id>https://binghan1227.github.io/post/test/</id>
        <link href="https://binghan1227.github.io/post/test/">
        </link>
        <updated>2020-03-06T03:59:24.000Z</updated>
        <summary type="html"><![CDATA[<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<!-- more -->
<blockquote>
<p>本文章只是测试网页Markdown的显示效果</p>
</blockquote>
<h1 id="一级标题">一级标题</h1>
<h2 id="二级标题">二级标题</h2>
<h3 id="三级标题">三级标题</h3>
<h4 id="四级标题">四级标题</h4>
<h5 id="五级标题">五级标题</h5>
<h6 id="六级标题">六级标题</h6>
<hr>
<p><em>斜体文本</em><br>
<strong>粗体文本</strong><br>
<em><strong>粗斜体文本</strong></em><br>
<s>删除</s><br>
角标 <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<blockquote>
<p>套娃</p>
<blockquote>
<p>...</p>
<blockquote>
<p>禁止套娃</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code class="language-c++">cout&lt;&lt;&quot;Hello World!&quot;&lt;&lt;endl;
</code></pre>
<p><a href="https://binghan1227.github.io">首页链接</a><br>
<img src="https://binghan1227.github.io/post-images/1583467725645.jpeg" alt="" loading="lazy"></p>
<table>
<thead>
<tr>
<th style="text-align:left">左对齐</th>
<th style="text-align:right">右对齐</th>
<th style="text-align:center">居中对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
</tbody>
</table>
<p>使用 <kbd>F5</kbd> 刷新页面</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>角标测试 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
</feed>